;;;; -*- mode: scheme -*-

;; Extend this with additional state bits, adding accessors
;; below as you go.
(define build-state
  (lambda (dir waypoint)
    ;; dir - direction enum
    ;; waypoint - (row, col) tuple giving immediate desired location
    (list dir waypoint)))
(define get-state-dir
  (lambda (state)
    (car state)))
(define get-state-waypoint
  (lambda (state)
    (list-ref state 1)))

(define next-power-pill
  (lambda (world-map player-loc)
    (begin
      (define power-pills (find-item-locs world-map power-pill))
      (if (null? power-pills)
          ;; Just stay at current loc
          player-loc
          ;; Otherwise just pick the first
          (car power-pills)))))

;;;; Simple waypoint-based AI. Goes to each power pill in succession.
(define init
  (lambda (THUNK)
    (begin
      (define init-power-pill-locs (find-item-locs world-map power-pill))
      (define init-power-pill-dists
        (make-dict init-power-pill-locs
                   (lambda (pill-loc) (bfs pill-loc))))
      (define step
        (lambda (state world)
          (begin
            (define player-loc (get-player-loc (get-player-status world)))
            (define cur-waypoint (get-state-waypoint state))
            (define next-waypoint (next-power-pill (get-world-map world) player-loc))
            (define next-dir
              (dict-lookup
               (dict-lookup init-power-pill-dists next-waypoint)
               player-loc))
            (cons (build-state next-dir next-waypoint) next-dir))))
      (cons (build-state up nil) step))))

(init)
