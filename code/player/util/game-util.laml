;;;; -*- mode: scheme -*-
(define wall 0)
(define empty 1)
(define pill 2)
(define power-pill 3)
(define fruit 4)
(define player-start 5)
(define ghost-start 6)

(define ghost-vitality-standard 0)
(define ghost-vitality-fright 1)
(define ghost-vitality-invisible 2)

(define up 0)
(define right 1)
(define down 2)
(define left 3)
(define all-dirs (list up right down left))

;; Locations are defines as a (row, col) tuple
(define make-loc
  (lambda (row col)
    (cons row col)))
(define get-loc-row
  (lambda (loc)
    (car loc)))
(define get-loc-col
  (lambda (loc)
    (cdr loc)))
(define loc=?
  (lambda (loc1 loc2)
    (and (= (get-loc-row loc1)
            (get-loc-row loc2))
         (= (get-loc-col loc1)
            (get-loc-col loc2)))))

;; Doesn't bound check, that should be done externally
(define get-map-val
  (lambda (world-map loc)
    (list-ref
     (list-ref world-map (get-loc-row loc))
     (get-loc-col loc))))

(define check-loc-in-bounds
  (lambda (world-map loc)
    (and (and (>= (get-loc-row loc) 0)
              (< (get-loc-row loc) (list-size world-map)))
         (and (>= (get-loc-col loc) 0)
              (< (get-loc-col loc) (list-size (car world-map)))))))

(define is-wall
  (lambda (world-map loc)
    (if (not (check-loc-in-bounds world-map loc))
        ;; If out-of-bounds, consider it a wall
        true
        (= wall (get-map-val world-map loc)))))

(define get-dir-loc
  (lambda (dir loc)
    (begin
      (define row-start (get-loc-row loc))
      (define col-start (get-loc-col loc))
      (if (= dir up)
          (make-loc (- row-start 1) col-start)
          (if (= dir right)
              (make-loc row-start (+ col-start 1))
              (if (= dir down)
                  (make-loc (+ row-start 1) col-start)
                  (if (= dir left)
                      (make-loc row-start (- col-start 1))
                      false)))))))

(define get-world-map
  (lambda (world-state)
    (car world-state)))

(define get-player-status
  (lambda (world-state)
    (list-ref world-state 1)))

(define get-ghost-status
  (lambda (world-state)
    (list-ref world-state 2)))

(define get-fruit-status
  (lambda (world-state)
    (list-ref world-state 3)))

(define get-player-vitality
  (lambda (player-status)
    (car player-status)))

(define get-player-loc
  (lambda (player-status)
    (begin
      (define coord-loc (list-ref player-status 1))
      ;; Need to flip the (x,y) coord to (row,col)
      (cons (cdr coord-loc) (car coord-loc)))))

(define get-player-dir
  (lambda (player-status)
    (list-ref player-status 2)))

(define get-player-lives
  (lambda (player-status)
    (list-ref player-status 3)))

(define get-player-score
  (lambda (player-status)
    (list-ref player-status 4)))

(define dir-works
  (lambda (world-map dir loc)
    (begin
      (define player-next-loc (get-dir-loc dir loc))
      (not (is-wall world-map player-next-loc)))))

(define wrap-dir
  (lambda (maybe-dir)
    (if (> maybe-dir 3)
        (- maybe-dir 4)
        maybe-dir)))

(define opposing-dir?
  (lambda (dir1 dir2)
    (begin
      (define diff (- dir1 dir2))
      (or (= diff 2)
          (= diff -2)))))

(define get-opposing-dir
  (lambda (dir)
    (wrap-dir (+ dir 2))))

(define find-item-locs
  (lambda (world-map item)
    (begin
      ;; Iterate over world map row with index
      (define find-item-indices-in-row
        (lambda (world-map-row col-index)
          ;; Returns a list of column indices for items found in this row
          (if (null? world-map-row)
              nil
              (if (= (car world-map-row) item)
                  (cons col-index (find-item-indices-in-row
                                   (cdr world-map-row) (+ col-index 1)))
                  (find-item-indices-in-row
                   (cdr world-map-row) (+ col-index 1))))))
      ;; Iterate over the entire world map list-of-lists with index
      (define find-item-indices
        (lambda (world-map row-index)
          (if (null? world-map)
              nil
              (list-extend
               (map
                (lambda (col-index)
                  (cons row-index col-index))
                ;; Translate the list of column indices into (row, col) pairs
                (find-item-indices-in-row (car world-map) 0))
               (find-item-indices (cdr world-map) (+ row-index 1))))))
      (find-item-indices world-map 0))))
