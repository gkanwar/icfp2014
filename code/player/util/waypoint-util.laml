;;;; -*- mode: scheme -*-
;;;; Utilities for getting directions to waypoints using BFS to find the
;;;; shortest route. Since paths are reverse-order, BFS from the target TO
;;;; your location, then flip directions.

;;; Path is defined as (current loc, directions). Direction is a reverse list.
;;; Paths are forbidden from reversing direction.
(define make-path
  (lambda (loc dirs)
    (cons loc dirs)))
(define get-path-loc
  (lambda (path)
    (car path)))
(define get-path-dirs
  (lambda (path)
    (cdr path)))
(define extend-path
  (lambda (path dir)
    (make-path (get-dir-loc dir (get-path-loc path))
               (cons dir (get-path-dirs path)))))

;;; Flip the directions on each path
(define flip-path-dirs
  (lambda (path)
    (make-path
     (get-path-loc path)
     (map get-opposing-dir (get-path-dirs path)))))

;; Frontier is a list of paths
(define has-loc?
  (lambda (loc frontier)
    (if (null? frontier)
        false
        (if (loc=? (get-path-loc (car frontier))
                   loc)
            true
            (has-loc? loc (cdr frontier))))))

;; Guard this call with (has-loc?)
(define get-path-with-loc
  (lambda (loc frontier)
    (if (null? frontier)
        nil
        (if (loc=? (get-path-loc (car frontier))
                   loc)
            (car frontier)
            (get-path-with-loc loc (cdr frontier))))))

;;; BFS from a point to all reachable points on the map
;;; Return a dictionary from coord to a direction.
(define bfs
  (lambda (target)
    (begin
      (dbug target)
      (define bfs-helper
        (lambda (seen-dict frontier)
          ;; seen-dict - which squares we've visited associated with their paths
          ;; frontier - list of paths
          ;; Returns dictionary of dist and dirs from reachable squares.
          ;; use flip-path-dirs to get a path from start to end.
          (begin
            (define expand-path
              (lambda (seen-frontier next-path)
                ;; seen-frontier is a tuple of (seen-dict, new-frontier)
                (begin
                  (define prev-loc
                    (begin
                      (dbug 450)
                      (dbug seen-frontier)
                      (dbug next-path)
                      (get-path-loc next-path)))
                  (define prev-dirs (get-path-dirs next-path))
                  (define valid-dirs
                    (filter
                     (lambda (dir)
                       (begin
                         (define dir-loc (get-dir-loc dir prev-loc))
                         ;; Filter out seen
                         (if (null? (loc-dict-lookup seen-dict dir-loc))
                             (and (not (is-wall dir-loc))
                                  ;; null means no previous direction, so any dir is fine
                                  ;; Need to use sc-or here so that we don't try to evaluate
                                  ;; the car of a nil list.
                                  (sc-or (lambda (THUNK)
                                           (null? prev-dirs))
                                         (lambda (THUNK)
                                           (not (opposing-dir? dir (car prev-dirs))))))
                             false)))
                     all-dirs))
                  ;; Extend the frontier and seen dicts
                  (define new-paths
                    (map
                     (lambda (dir)
                       (extend-path next-path dir))
                     valid-dirs))
                  (define new-frontier
                    (list-extend new-paths (cdr seen-frontier)))
                  (define new-seen-dict
                    (dict-extend
                     (car seen-frontier)
                     (map
                      (lambda (path)
                        (get-path-loc path))
                      new-paths)
                     new-paths))
                  (define out-accum (tuple new-seen-dict new-frontier))
                  (dbug 451)
                  (dbug new-seen-dict)
                  (dbug new-frontier)
                  (dbug out-accum)
                  out-accum
                  )))
            (define new-seen-frontier
              (fold-left expand-path (tuple seen-dict nil) frontier))
            (if (null? frontier)
                (begin
                  ;; Done! We've seen everything
                  (dbug 777)
                  seen-dict)
                (begin
                  (dbug 409)
                  (dbug new-seen-frontier)
                  (bfs-helper (car new-seen-frontier) (cdr new-seen-frontier)))))))
      (define seen-dict
        (begin
          (dbug 400)
          (bfs-helper empty-dict (list (make-path target nil)))))
      (map
       (lambda (kv-pair)
         (begin
           (define loc (car kv-pair))
           (define path (cdr kv-pair))
           (tuple loc (get-opposing-dir (car (get-path-dirs path))))))
       seen-dict))))
