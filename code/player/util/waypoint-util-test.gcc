LDC 0 ; Symbol false init for main
LDC 0 ; Symbol true init for main
LDC 0 ; Symbol < init for main
LDC 0 ; Symbol <= init for main
LDC 0 ; Symbol not init for main
LDC 0 ; Symbol or init for main
LDC 0 ; Symbol and init for main
LDC 0 ; Symbol sc-or init for main
LDC 0 ; Symbol sc-and init for main
LDC 0 ; Symbol nil init for main
LDC 0 ; Symbol null? init for main
LDC 0 ; Symbol list-ref init for main
LDC 0 ; Symbol list-size init for main
LDC 0 ; Symbol tuple-size init for main
LDC 0 ; Symbol map init for main
LDC 0 ; Symbol filter init for main
LDC 0 ; Symbol fold-left init for main
LDC 0 ; Symbol list-extend init for main
LDC 0 ; Symbol wall init for main
LDC 0 ; Symbol empty init for main
LDC 0 ; Symbol pill init for main
LDC 0 ; Symbol power-pill init for main
LDC 0 ; Symbol fruit init for main
LDC 0 ; Symbol player-start init for main
LDC 0 ; Symbol ghost-start init for main
LDC 0 ; Symbol ghost-vitality-standard init for main
LDC 0 ; Symbol ghost-vitality-fright init for main
LDC 0 ; Symbol ghost-vitality-invisible init for main
LDC 0 ; Symbol up init for main
LDC 0 ; Symbol right init for main
LDC 0 ; Symbol down init for main
LDC 0 ; Symbol left init for main
LDC 0 ; Symbol all-dirs init for main
LDC 0 ; Symbol make-loc init for main
LDC 0 ; Symbol get-loc-row init for main
LDC 0 ; Symbol get-loc-col init for main
LDC 0 ; Symbol loc=? init for main
LDC 0 ; Symbol get-map-val init for main
LDC 0 ; Symbol check-loc-in-bounds init for main
LDC 0 ; Symbol is-wall init for main
LDC 0 ; Symbol get-dir-loc init for main
LDC 0 ; Symbol get-world-map init for main
LDC 0 ; Symbol get-player-status init for main
LDC 0 ; Symbol get-ghost-status init for main
LDC 0 ; Symbol get-fruit-status init for main
LDC 0 ; Symbol get-player-vitality init for main
LDC 0 ; Symbol get-player-loc init for main
LDC 0 ; Symbol get-player-dir init for main
LDC 0 ; Symbol get-player-lives init for main
LDC 0 ; Symbol get-player-score init for main
LDC 0 ; Symbol dir-works init for main
LDC 0 ; Symbol wrap-dir init for main
LDC 0 ; Symbol opposing-dir? init for main
LDC 0 ; Symbol get-opposing-dir init for main
LDC 0 ; Symbol find-item-locs init for main
LDC 0 ; Symbol make-path init for main
LDC 0 ; Symbol get-path-loc init for main
LDC 0 ; Symbol get-path-dirs init for main
LDC 0 ; Symbol extend-path init for main
LDC 0 ; Symbol flip-path-dirs init for main
LDC 0 ; Symbol has-loc? init for main
LDC 0 ; Symbol get-path-with-loc init for main
LDC 0 ; Symbol bfs-helper init for main
LDC 0 ; Symbol bfs init for main
LDC 0 ; Symbol compute-waypoint-path init for main
LDC 0 ; Symbol world-map init for main
LDF 69 ; Load main_$body$
AP 66 ; Call main_$body$
RTN ; main return

LDC 0 ; Define false
ST 0 0 ; End define false
LDC 1 ; Define true
ST 0 1 ; End define true
LDF 767 ; Define <
ST 0 2 ; End define <
LDF 777 ; Define <=
ST 0 3 ; End define <=
LDF 793 ; Define not
ST 0 4 ; End define not
LDF 573 ; Define or
ST 0 5 ; End define or
LDF 604 ; Define and
ST 0 6 ; End define and
LDF 659 ; Define sc-or
ST 0 7 ; End define sc-or
LDF 620 ; Define sc-and
ST 0 8 ; End define sc-and
LDC 0 ; Define nil
ST 0 9 ; End define nil
LDF 612 ; Define null?
ST 0 10 ; End define null?
LDF 596 ; Define list-ref
ST 0 11 ; End define list-ref
LDF 632 ; Define list-size
ST 0 12 ; End define list-size
LDF 549 ; Define tuple-size
ST 0 13 ; End define tuple-size
LDF 528 ; Define map
ST 0 14 ; End define map
LDF 559 ; Define filter
ST 0 15 ; End define filter
LDF 419 ; Define fold-left
ST 0 16 ; End define fold-left
LDF 456 ; Define list-extend
ST 0 17 ; End define list-extend
LDC 0 ; Define wall
ST 0 18 ; End define wall
LDC 1 ; Define empty
ST 0 19 ; End define empty
LDC 2 ; Define pill
ST 0 20 ; End define pill
LDC 3 ; Define power-pill
ST 0 21 ; End define power-pill
LDC 4 ; Define fruit
ST 0 22 ; End define fruit
LDC 5 ; Define player-start
ST 0 23 ; End define player-start
LDC 6 ; Define ghost-start
ST 0 24 ; End define ghost-start
LDC 0 ; Define ghost-vitality-standard
ST 0 25 ; End define ghost-vitality-standard
LDC 1 ; Define ghost-vitality-fright
ST 0 26 ; End define ghost-vitality-fright
LDC 2 ; Define ghost-vitality-invisible
ST 0 27 ; End define ghost-vitality-invisible
LDC 0 ; Define up
ST 0 28 ; End define up
LDC 1 ; Define right
ST 0 29 ; End define right
LDC 2 ; Define down
ST 0 30 ; End define down
LDC 3 ; Define left
ST 0 31 ; End define left
LD 0 28 ; Define all-dirs
LD 0 29 ; Var right
LD 0 30 ; Var down
LD 0 31 ; Var left
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
ST 0 32 ; End define all-dirs
LDF 449 ; Define make-loc
ST 0 33 ; End define make-loc
LDF 470 ; Define get-loc-row
ST 0 34 ; End define get-loc-row
LDF 464 ; Define get-loc-col
ST 0 35 ; End define get-loc-col
LDF 491 ; Define loc=?
ST 0 36 ; End define loc=?
LDF 476 ; Define get-map-val
ST 0 37 ; End define get-map-val
LDF 382 ; Define check-loc-in-bounds
ST 0 38 ; End define check-loc-in-bounds
LDF 333 ; Define is-wall
ST 0 39 ; End define is-wall
LDF 1150 ; Define get-dir-loc
ST 0 40 ; End define get-dir-loc
LDF 1168 ; Define get-world-map
ST 0 41 ; End define get-world-map
LDF 1174 ; Define get-player-status
ST 0 42 ; End define get-player-status
LDF 1182 ; Define get-ghost-status
ST 0 43 ; End define get-ghost-status
LDF 1113 ; Define get-fruit-status
ST 0 44 ; End define get-fruit-status
LDF 1121 ; Define get-player-vitality
ST 0 45 ; End define get-player-vitality
LDF 1127 ; Define get-player-loc
ST 0 46 ; End define get-player-loc
LDF 1142 ; Define get-player-dir
ST 0 47 ; End define get-player-dir
LDF 1081 ; Define get-player-lives
ST 0 48 ; End define get-player-lives
LDF 1105 ; Define get-player-score
ST 0 49 ; End define get-player-score
LDF 1089 ; Define dir-works
ST 0 50 ; End define dir-works
LDF 1050 ; Define wrap-dir
ST 0 51 ; End define wrap-dir
LDF 1058 ; Define opposing-dir?
ST 0 52 ; End define opposing-dir?
LDF 1039 ; Define get-opposing-dir
ST 0 53 ; End define get-opposing-dir
LDF 869 ; Define find-item-locs
ST 0 54 ; End define find-item-locs
LDF 888 ; Define make-path
ST 0 55 ; End define make-path
LDF 900 ; Define get-path-loc
ST 0 56 ; End define get-path-loc
LDF 708 ; Define get-path-dirs
ST 0 57 ; End define get-path-dirs
LDF 735 ; Define extend-path
ST 0 58 ; End define extend-path
LDF 720 ; Define flip-path-dirs
ST 0 59 ; End define flip-path-dirs
LDF 670 ; Define has-loc?
ST 0 60 ; End define has-loc?
LDF 700 ; Define get-path-with-loc
ST 0 61 ; End define get-path-with-loc
LDF 968 ; Define bfs-helper
ST 0 62 ; End define bfs-helper
LDF 949 ; Define bfs
ST 0 63 ; End define bfs
LDF 1028 ; Define compute-waypoint-path
ST 0 64 ; End define compute-waypoint-path
LDC 0 ; Define world-map
LDC 0 ; 
LDC 0 ; 
LDC 0 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
LDC 2 ; 
LDC 2 ; 
LDC 3 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
LDC 2 ; 
LDC 0 ; 
LDC 2 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
LDC 2 ; 
LDC 2 ; 
LDC 2 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
LDC 2 ; 
LDC 0 ; 
LDC 2 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
LDC 2 ; 
LDC 0 ; 
LDC 2 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
LDC 5 ; 
LDC 2 ; 
LDC 2 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
LDC 0 ; 
LDC 0 ; 
LDC 0 ; 
LDC 0 ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
LDC 0 ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
CONS ; 
ST 0 65 ; End define world-map
LD 0 65 ; Var world-map
LDC 6 ; 
LDC 1 ; 
LD 0 33 ; Var make-loc
AP 2 ; Func call make-loc
LDC 1 ; 
LDC 3 ; 
LD 0 33 ; Var make-loc
AP 2 ; Func call make-loc
LD 0 63 ; Var bfs
AP 3 ; Func call bfs
RTN ; main_$body$ return

LD 0 0 ; Var row-start
LD 0 1 ; Var col-start
LDC 1 ; 
SUB ; 
LD 2 33 ; Var make-loc
AP 2 ; Func call make-loc
JOIN ; func60 join

LD 2 0 ; Var false
JOIN ; func61 join

LD 0 0 ; Var row-start
LDC 1 ; 
SUB ; 
LD 0 1 ; Var col-start
LD 2 33 ; Var make-loc
AP 2 ; Func call make-loc
JOIN ; func54 join

LDF 336 ; Load func53_$body$
AP 0 ; Call func53_$body$
RTN ; func53 return

LD 1 0 ; Var world-map
LD 1 1 ; Var loc
LD 2 38 ; Var check-loc-in-bounds
AP 2 ; Func call check-loc-in-bounds
LD 2 4 ; Var not
AP 1 ; Func call not
SEL 351 344 ; Sel on predicate (not (check-loc-in-bounds world-map loc ) )
RTN ; func53_$body$ return

LD 2 18 ; Var wall
LD 1 0 ; Var world-map
LD 1 1 ; Var loc
LD 2 37 ; Var get-map-val
AP 2 ; Func call get-map-val
CEQ ; 
JOIN ; func52 join

LD 2 1 ; Var true
JOIN ; func51 join

LD 0 0 ; Var row-start
LDC 1 ; 
ADD ; 
LD 0 1 ; Var col-start
LD 2 33 ; Var make-loc
AP 2 ; Func call make-loc
JOIN ; func58 join

LD 1 0 ; Var dir
LD 2 30 ; Var down
CEQ ; 
SEL 353 377 ; Sel on predicate (= dir down )
JOIN ; func57 join

LD 0 0 ; Var row-start
LD 0 1 ; Var col-start
LDC 1 ; 
ADD ; 
LD 2 33 ; Var make-loc
AP 2 ; Func call make-loc
JOIN ; func56 join

LD 1 0 ; Var dir
LD 2 29 ; Var right
CEQ ; 
SEL 365 360 ; Sel on predicate (= dir right )
JOIN ; func55 join

LD 1 0 ; Var dir
LD 2 31 ; Var left
CEQ ; 
SEL 317 324 ; Sel on predicate (= dir left )
JOIN ; func59 join

LDF 385 ; Load func50_$body$
AP 0 ; Call func50_$body$
RTN ; func50 return

LD 1 1 ; Var loc
LD 2 34 ; Var get-loc-row
AP 1 ; Func call get-loc-row
LDC 0 ; 
CGTE ; 
LD 1 1 ; Var loc
LD 2 34 ; Var get-loc-row
AP 1 ; Func call get-loc-row
LD 1 0 ; Var world-map
LD 2 12 ; Var list-size
AP 1 ; Func call list-size
LD 2 2 ; Var <
AP 2 ; Func call <
LD 2 6 ; Var and
AP 2 ; Func call and
LD 1 1 ; Var loc
LD 2 35 ; Var get-loc-col
AP 1 ; Func call get-loc-col
LDC 0 ; 
CGTE ; 
LD 1 1 ; Var loc
LD 2 35 ; Var get-loc-col
AP 1 ; Func call get-loc-col
LD 1 0 ; Var world-map
CAR ; 
LD 2 12 ; Var list-size
AP 1 ; Func call list-size
LD 2 2 ; Var <
AP 2 ; Func call <
LD 2 6 ; Var and
AP 2 ; Func call and
LD 2 6 ; Var and
AP 2 ; Func call and
RTN ; func50_$body$ return

LDF 422 ; Load func41_$body$
AP 0 ; Call func41_$body$
RTN ; func41 return

LD 1 2 ; Var l
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 557 427 ; Sel on predicate (null? l )
RTN ; func41_$body$ return

LD 1 0 ; Var func
LD 1 1 ; Var accum
LD 1 2 ; Var l
CAR ; 
LD 1 0 ; Var func
AP 2 ; Func call func
LD 1 2 ; Var l
CDR ; 
LD 2 16 ; Var fold-left
AP 3 ; Func call fold-left
JOIN ; func40 join

LD 1 0 ; Var l1
CAR ; 
LD 1 0 ; Var l1
CDR ; 
LD 1 1 ; Var l2
LD 2 17 ; Var list-extend
AP 2 ; Func call list-extend
CONS ; 
JOIN ; func43 join

LD 1 1 ; Var l2
JOIN ; func42 join

LDF 452 ; Load func45_$body$
AP 0 ; Call func45_$body$
RTN ; func45 return

LD 1 0 ; Var row
LD 1 1 ; Var col
CONS ; 
RTN ; func45_$body$ return

LDF 459 ; Load func44_$body$
AP 0 ; Call func44_$body$
RTN ; func44 return

LD 1 0 ; Var l1
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 447 438 ; Sel on predicate (null? l1 )
RTN ; func44_$body$ return

LDF 467 ; Load func47_$body$
AP 0 ; Call func47_$body$
RTN ; func47 return

LD 1 0 ; Var loc
CDR ; 
RTN ; func47_$body$ return

LDF 473 ; Load func46_$body$
AP 0 ; Call func46_$body$
RTN ; func46 return

LD 1 0 ; Var loc
CAR ; 
RTN ; func46_$body$ return

LDF 479 ; Load func49_$body$
AP 0 ; Call func49_$body$
RTN ; func49 return

LD 1 0 ; Var world-map
LD 1 1 ; Var loc
LD 2 34 ; Var get-loc-row
AP 1 ; Func call get-loc-row
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
LD 1 1 ; Var loc
LD 2 35 ; Var get-loc-col
AP 1 ; Func call get-loc-col
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
RTN ; func49_$body$ return

LDF 494 ; Load func48_$body$
AP 0 ; Call func48_$body$
RTN ; func48 return

LD 1 0 ; Var loc1
LD 2 34 ; Var get-loc-row
AP 1 ; Func call get-loc-row
LD 1 1 ; Var loc2
LD 2 34 ; Var get-loc-row
AP 1 ; Func call get-loc-row
CEQ ; 
LD 1 0 ; Var loc1
LD 2 35 ; Var get-loc-col
AP 1 ; Func call get-loc-col
LD 1 1 ; Var loc2
LD 2 35 ; Var get-loc-col
AP 1 ; Func call get-loc-col
CEQ ; 
LD 2 6 ; Var and
AP 2 ; Func call and
RTN ; func48_$body$ return

LD 1 1 ; Var l
CAR ; 
LD 1 0 ; Var func
LD 1 1 ; Var l
CDR ; 
LD 2 15 ; Var filter
AP 2 ; Func call filter
CONS ; 
JOIN ; func36 join

LD 1 1 ; Var l
CAR ; 
LD 1 0 ; Var func
AP 1 ; Func call func
SEL 511 567 ; Sel on predicate (func (car l ) )
JOIN ; func35 join

LD 2 9 ; Var nil
JOIN ; func34 join

LDF 531 ; Load func33_$body$
AP 0 ; Call func33_$body$
RTN ; func33 return

LD 1 1 ; Var l
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 547 536 ; Sel on predicate (null? l )
RTN ; func33_$body$ return

LD 1 1 ; Var l
CAR ; 
LD 1 0 ; Var func
AP 1 ; Func call func
LD 1 0 ; Var func
LD 1 1 ; Var l
CDR ; 
LD 2 14 ; Var map
AP 2 ; Func call map
CONS ; 
JOIN ; func32 join

LD 2 9 ; Var nil
JOIN ; func31 join

LDF 552 ; Load func30_$body$
AP 0 ; Call func30_$body$
RTN ; func30 return

LD 1 0 ; Var t
CDR ; 
ATOM ; 
SEL 666 652 ; Sel on predicate (atom (cdr t ) )
RTN ; func30_$body$ return

LD 1 1 ; Var accum
JOIN ; func39 join

LDF 562 ; Load func38_$body$
AP 0 ; Call func38_$body$
RTN ; func38 return

LD 1 1 ; Var l
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 526 520 ; Sel on predicate (null? l )
RTN ; func38_$body$ return

LD 1 0 ; Var func
LD 1 1 ; Var l
CDR ; 
LD 2 15 ; Var filter
AP 2 ; Func call filter
JOIN ; func37 join

LDF 576 ; Load func11_$body$
AP 0 ; Call func11_$body$
RTN ; func11 return

LD 1 0 ; Var cond1
SEL 791 618 ; Sel on predicate cond1
RTN ; func11_$body$ return

LD 1 0 ; Var l
CDR ; 
LD 1 1 ; Var index
LDC 1 ; 
SUB ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
JOIN ; func23 join

LD 2 0 ; Var false
JOIN ; func12 join

LD 1 0 ; Var l
CAR ; 
JOIN ; func22 join

LDC 0 ; 
JOIN ; func25 join

LD 1 1 ; Var cond2
JOIN ; func13 join

LDF 599 ; Load func24_$body$
AP 0 ; Call func24_$body$
RTN ; func24 return

LD 1 1 ; Var index
LDC 0 ; 
CEQ ; 
SEL 589 579 ; Sel on predicate (= index 0 )
RTN ; func24_$body$ return

LDF 607 ; Load func14_$body$
AP 0 ; Call func14_$body$
RTN ; func14 return

LD 1 0 ; Var cond1
LD 2 4 ; Var not
AP 1 ; Func call not
SEL 587 594 ; Sel on predicate (not cond1 )
RTN ; func14_$body$ return

LDF 615 ; Load func21_$body$
AP 0 ; Call func21_$body$
RTN ; func21 return

LD 1 0 ; Var l
ATOM ; 
RTN ; func21_$body$ return

LD 1 1 ; Var cond2
JOIN ; func10 join

LDF 623 ; Load func20_$body$
AP 0 ; Call func20_$body$
RTN ; func20 return

LD 1 0 ; Var cond-thunk1
AP 0 ; Func call cond-thunk1
LD 2 4 ; Var not
AP 1 ; Func call not
SEL 668 629 ; Sel on predicate (not (cond-thunk1 ) )
RTN ; func20_$body$ return

LD 1 1 ; Var cond-thunk2
AP 0 ; Func call cond-thunk2
JOIN ; func19 join

LDF 635 ; Load func27_$body$
AP 0 ; Call func27_$body$
RTN ; func27 return

LD 1 0 ; Var l
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 592 642 ; Sel on predicate (null? l )
RTN ; func27_$body$ return

LD 2 1 ; Var true
JOIN ; func15 join

LDC 1 ; 
LD 1 0 ; Var l
CDR ; 
LD 2 12 ; Var list-size
AP 1 ; Func call list-size
ADD ; 
JOIN ; func26 join

LD 1 1 ; Var cond-thunk2
AP 0 ; Func call cond-thunk2
JOIN ; func16 join

LDC 1 ; 
LD 1 0 ; Var t
CDR ; 
LD 2 13 ; Var tuple-size
AP 1 ; Func call tuple-size
ADD ; 
JOIN ; func29 join

LDF 662 ; Load func17_$body$
AP 0 ; Call func17_$body$
RTN ; func17 return

LD 1 0 ; Var cond-thunk1
AP 0 ; Func call cond-thunk1
SEL 640 649 ; Sel on predicate (cond-thunk1 )
RTN ; func17_$body$ return

LDC 2 ; 
JOIN ; func28 join

LD 2 0 ; Var false
JOIN ; func18 join

LDF 673 ; Load func97_$body$
AP 0 ; Call func97_$body$
RTN ; func97 return

LD 1 1 ; Var frontier
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 761 752 ; Sel on predicate (null? frontier )
RTN ; func97_$body$ return

LD 2 9 ; Var nil
JOIN ; func98 join

LD 2 1 ; Var true
JOIN ; func95 join

LD 1 0 ; Var loc
LD 1 1 ; Var frontier
CDR ; 
LD 2 60 ; Var has-loc?
AP 2 ; Func call has-loc?
JOIN ; func96 join

LD 1 1 ; Var frontier
CAR ; 
LD 2 56 ; Var get-path-loc
AP 1 ; Func call get-path-loc
LD 1 0 ; Var loc
LD 2 36 ; Var loc=?
AP 2 ; Func call loc=?
SEL 697 714 ; Sel on predicate (loc=? (get-path-loc (car frontier ) ) loc )
JOIN ; func99 join

LD 1 1 ; Var frontier
CAR ; 
JOIN ; func100 join

LDF 703 ; Load func102_$body$
AP 0 ; Call func102_$body$
RTN ; func102 return

LD 1 1 ; Var frontier
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 678 688 ; Sel on predicate (null? frontier )
RTN ; func102_$body$ return

LDF 711 ; Load func90_$body$
AP 0 ; Call func90_$body$
RTN ; func90 return

LD 1 0 ; Var path
CDR ; 
RTN ; func90_$body$ return

LD 1 0 ; Var loc
LD 1 1 ; Var frontier
CDR ; 
LD 2 61 ; Var get-path-with-loc
AP 2 ; Func call get-path-with-loc
JOIN ; func101 join

LDF 723 ; Load func92_$body$
AP 0 ; Call func92_$body$
RTN ; func92 return

LD 1 0 ; Var path
LD 2 56 ; Var get-path-loc
AP 1 ; Func call get-path-loc
LD 2 53 ; Var get-opposing-dir
LD 1 0 ; Var path
LD 2 57 ; Var get-path-dirs
AP 1 ; Func call get-path-dirs
LD 2 14 ; Var map
AP 2 ; Func call map
LD 2 55 ; Var make-path
AP 2 ; Func call make-path
RTN ; func92_$body$ return

LDF 738 ; Load func91_$body$
AP 0 ; Call func91_$body$
RTN ; func91 return

LD 1 1 ; Var dir
LD 1 0 ; Var path
LD 2 56 ; Var get-path-loc
AP 1 ; Func call get-path-loc
LD 2 40 ; Var get-dir-loc
AP 2 ; Func call get-dir-loc
LD 1 1 ; Var dir
LD 1 0 ; Var path
LD 2 57 ; Var get-path-dirs
AP 1 ; Func call get-path-dirs
CONS ; 
LD 2 55 ; Var make-path
AP 2 ; Func call make-path
RTN ; func91_$body$ return

LD 1 1 ; Var frontier
CAR ; 
LD 2 56 ; Var get-path-loc
AP 1 ; Func call get-path-loc
LD 1 0 ; Var loc
LD 2 36 ; Var loc=?
AP 2 ; Func call loc=?
SEL 680 682 ; Sel on predicate (loc=? (get-path-loc (car frontier ) ) loc )
JOIN ; func94 join

LD 2 0 ; Var false
JOIN ; func93 join

LDC 0 ; 
JOIN ; func0 join

LDC 1 ; 
JOIN ; func1 join

LDF 770 ; Load func2_$body$
AP 0 ; Call func2_$body$
RTN ; func2 return

LD 1 0 ; Var num1
LD 1 1 ; Var num2
CGTE ; 
SEL 763 765 ; Sel on predicate (>= num1 num2 )
RTN ; func2_$body$ return

LDC 0 ; 
JOIN ; func3 join

LDF 780 ; Load func5_$body$
AP 0 ; Call func5_$body$
RTN ; func5 return

LD 1 0 ; Var num1
LD 1 1 ; Var num2
CGT ; 
SEL 775 785 ; Sel on predicate (> num1 num2 )
RTN ; func5_$body$ return

LDC 1 ; 
JOIN ; func4 join

LDC 1 ; 
JOIN ; func7 join

LDC 0 ; 
JOIN ; func6 join

LD 2 1 ; Var true
JOIN ; func9 join

LDF 796 ; Load func8_$body$
AP 0 ; Call func8_$body$
RTN ; func8 return

LD 1 0 ; Var bool
SEL 789 787 ; Sel on predicate bool
RTN ; func8_$body$ return

LDF 802 ; Load func107_$body$
AP 0 ; Call func107_$body$
RTN ; func107 return

LD 4 1 ; Var prev-dirs
LD 8 10 ; Var null?
AP 1 ; Func call null?
RTN ; func107_$body$ return

LDF 835 ; 
LD 1 0 ; Var world-map
CAR ; 
LDC 0 ; 
LD 2 0 ; Var find-item-indices-in-row
AP 2 ; Func call find-item-indices-in-row
LD 4 14 ; Var map
AP 2 ; Func call map
LD 1 0 ; Var world-map
CDR ; 
LD 1 1 ; Var row-index
LDC 1 ; 
ADD ; 
LD 2 1 ; Var find-item-indices
AP 2 ; Func call find-item-indices
LD 4 17 ; Var list-extend
AP 2 ; Func call list-extend
JOIN ; func84 join

LDF 827 ; Load func108_$body$
AP 0 ; Call func108_$body$
RTN ; func108 return

LD 3 0 ; Var dir
LD 4 1 ; Var prev-dirs
CAR ; 
LD 8 52 ; Var opposing-dir?
AP 2 ; Func call opposing-dir?
LD 8 4 ; Var not
AP 1 ; Func call not
RTN ; func108_$body$ return

LDF 838 ; Load func85_$body$
AP 0 ; Call func85_$body$
RTN ; func85 return

LD 3 1 ; Var row-index
LD 1 0 ; Var col-index
CONS ; 
RTN ; func85_$body$ return

LDF 845 ; Load func109_$body$
AP 0 ; Call func109_$body$
RTN ; func109 return

LD 5 0 ; Var world-map
LD 1 0 ; Var dir
LD 2 0 ; Var prev-loc
LD 6 40 ; Var get-dir-loc
AP 2 ; Func call get-dir-loc
LD 6 39 ; Var is-wall
AP 2 ; Func call is-wall
LD 6 4 ; Var not
AP 1 ; Func call not
LDF 799 ; 
LDF 824 ; 
LD 6 7 ; Var sc-or
AP 2 ; Func call sc-or
LD 6 6 ; Var and
AP 2 ; Func call and
RTN ; func109_$body$ return

LDF 864 ; Load func86_$body$
AP 0 ; Call func86_$body$
RTN ; func86 return

LD 1 0 ; Var world-map
LD 4 10 ; Var null?
AP 1 ; Func call null?
SEL 921 806 ; Sel on predicate (null? world-map )
RTN ; func86_$body$ return

LDC 0 ; Symbol find-item-indices-in-row init for func87
LDC 0 ; Symbol find-item-indices init for func87
LDF 874 ; Load func87_$body$
AP 2 ; Call func87_$body$
RTN ; func87 return

LDF 923 ; Define find-item-indices-in-row
ST 0 0 ; End define find-item-indices-in-row
LDF 861 ; Define find-item-indices
ST 0 1 ; End define find-item-indices
LD 1 0 ; Var world-map
LDC 0 ; 
LD 0 1 ; Var find-item-indices
AP 2 ; Func call find-item-indices
RTN ; func87_$body$ return

LD 1 1 ; Var target
LD 1 2 ; Var frontier
LD 2 61 ; Var get-path-with-loc
AP 2 ; Func call get-path-with-loc
JOIN ; func103 join

LDF 891 ; Load func88_$body$
AP 0 ; Call func88_$body$
RTN ; func88 return

LD 1 0 ; Var loc
LD 1 1 ; Var dirs
CONS ; 
RTN ; func88_$body$ return

LD 1 2 ; Var frontier
LD 2 10 ; Var null?
AP 1 ; Func call null?
SEL 906 915 ; Sel on predicate (null? frontier )
JOIN ; func104 join

LDF 903 ; Load func89_$body$
AP 0 ; Call func89_$body$
RTN ; func89 return

LD 1 0 ; Var path
CAR ; 
RTN ; func89_$body$ return

LDC 666 ; 
DBUG ; 
LD 1 1 ; Var target
LD 2 31 ; Var left
LDC 0 ; 
CONS ; 
LD 2 55 ; Var make-path
AP 2 ; Func call make-path
JOIN ; func105 join

LD 1 0 ; Var world-map
LD 1 1 ; Var target
LD 0 1 ; Var new-frontier
LD 2 62 ; Var bfs-helper
AP 3 ; Func call bfs-helper
JOIN ; func106 join

LD 4 9 ; Var nil
JOIN ; func83 join

LDF 926 ; Load func82_$body$
AP 0 ; Call func82_$body$
RTN ; func82 return

LD 1 0 ; Var world-map-row
LD 4 10 ; Var null?
AP 1 ; Func call null?
SEL 1048 1022 ; Sel on predicate (null? world-map-row )
RTN ; func82_$body$ return

LD 1 0 ; Var world-map-row
CDR ; 
LD 1 1 ; Var col-index
LDC 1 ; 
ADD ; 
LD 2 0 ; Var find-item-indices-in-row
AP 2 ; Func call find-item-indices-in-row
JOIN ; func81 join

LD 1 1 ; Var col-index
LD 1 0 ; Var world-map-row
CDR ; 
LD 1 1 ; Var col-index
LDC 1 ; 
ADD ; 
LD 2 0 ; Var find-item-indices-in-row
AP 2 ; Func call find-item-indices-in-row
CONS ; 
JOIN ; func80 join

LDC 0 ; Symbol reverse-path init for func113
LDF 953 ; Load func113_$body$
AP 1 ; Call func113_$body$
RTN ; func113 return

LD 1 0 ; Define reverse-path
LD 1 1 ; Var start
LD 1 2 ; Var end
LD 2 9 ; Var nil
LD 2 55 ; Var make-path
AP 2 ; Func call make-path
LDC 0 ; 
CONS ; 
LD 2 62 ; Var bfs-helper
AP 3 ; Func call bfs-helper
ST 0 0 ; End define reverse-path
LD 0 0 ; Var reverse-path
LD 2 59 ; Var flip-path-dirs
AP 1 ; Func call flip-path-dirs
RTN ; func113_$body$ return

LDC 0 ; Symbol expand-path init for func112
LDC 0 ; Symbol new-frontier init for func112
LDF 973 ; Load func112_$body$
AP 2 ; Call func112_$body$
RTN ; func112 return

LDF 987 ; Define expand-path
ST 0 0 ; End define expand-path
LD 0 0 ; Define new-frontier
LD 2 9 ; Var nil
LD 1 2 ; Var frontier
LD 2 16 ; Var fold-left
AP 3 ; Func call fold-left
ST 0 1 ; End define new-frontier
LD 1 1 ; Var target
LD 1 2 ; Var frontier
LD 2 60 ; Var has-loc?
AP 2 ; Func call has-loc?
SEL 883 895 ; Sel on predicate (has-loc? target frontier )
RTN ; func112_$body$ return

LDC 0 ; Symbol prev-loc init for func111
LDC 0 ; Symbol prev-dirs init for func111
LDC 0 ; Symbol valid-dirs init for func111
LDF 993 ; Load func111_$body$
AP 3 ; Call func111_$body$
RTN ; func111 return

LD 1 1 ; Define prev-loc
LD 4 56 ; Var get-path-loc
AP 1 ; Func call get-path-loc
ST 0 0 ; End define prev-loc
LD 1 1 ; Define prev-dirs
LD 4 57 ; Var get-path-dirs
AP 1 ; Func call get-path-dirs
ST 0 1 ; End define prev-dirs
LDF 842 ; Define valid-dirs
LD 4 32 ; Var all-dirs
LD 4 15 ; Var filter
AP 2 ; Func call filter
ST 0 2 ; End define valid-dirs
LDF 1014 ; 
LD 0 2 ; Var valid-dirs
LD 4 14 ; Var map
AP 2 ; Func call map
LD 1 0 ; Var new-frontier
LD 4 17 ; Var list-extend
AP 2 ; Func call list-extend
RTN ; func111_$body$ return

LDF 1017 ; Load func110_$body$
AP 0 ; Call func110_$body$
RTN ; func110 return

LD 3 1 ; Var next-path
LD 1 0 ; Var dir
LD 6 58 ; Var extend-path
AP 2 ; Func call extend-path
RTN ; func110_$body$ return

LD 1 0 ; Var world-map-row
CAR ; 
LD 3 1 ; Var item
CEQ ; 
SEL 939 931 ; Sel on predicate (= (car world-map-row ) item )
JOIN ; func79 join

LDF 1031 ; Load func114_$body$
AP 0 ; Call func114_$body$
RTN ; func114 return

LD 1 0 ; Var world-map
LD 1 1 ; Var loc
LD 1 2 ; Var waypoint
LD 2 63 ; Var bfs
AP 3 ; Func call bfs
LD 2 57 ; Var get-path-dirs
AP 1 ; Func call get-path-dirs
RTN ; func114_$body$ return

LDF 1042 ; Load func77_$body$
AP 0 ; Call func77_$body$
RTN ; func77 return

LD 1 0 ; Var dir
LDC 2 ; 
ADD ; 
LD 2 51 ; Var wrap-dir
AP 1 ; Func call wrap-dir
RTN ; func77_$body$ return

LD 4 9 ; Var nil
JOIN ; func78 join

LDF 1053 ; Load func75_$body$
AP 0 ; Call func75_$body$
RTN ; func75 return

LD 1 0 ; Var maybe-dir
LDC 3 ; 
CGT ; 
SEL 1075 1079 ; Sel on predicate (> maybe-dir 3 )
RTN ; func75_$body$ return

LDC 0 ; Symbol diff init for func76
LDF 1062 ; Load func76_$body$
AP 1 ; Call func76_$body$
RTN ; func76 return

LD 1 0 ; Define diff
LD 1 1 ; Var dir2
SUB ; 
ST 0 0 ; End define diff
LD 0 0 ; Var diff
LDC 2 ; 
CEQ ; 
LD 0 0 ; Var diff
LDC -2 ; 
CEQ ; 
LD 2 5 ; Var or
AP 2 ; Func call or
RTN ; func76_$body$ return

LD 1 0 ; Var maybe-dir
LDC 4 ; 
SUB ; 
JOIN ; func73 join

LD 1 0 ; Var maybe-dir
JOIN ; func74 join

LDF 1084 ; Load func70_$body$
AP 0 ; Call func70_$body$
RTN ; func70 return

LD 1 0 ; Var player-status
LDC 3 ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
RTN ; func70_$body$ return

LDC 0 ; Symbol player-next-loc init for func72
LDF 1093 ; Load func72_$body$
AP 1 ; Call func72_$body$
RTN ; func72 return

LD 1 1 ; Define player-next-loc
LD 1 2 ; Var loc
LD 2 40 ; Var get-dir-loc
AP 2 ; Func call get-dir-loc
ST 0 0 ; End define player-next-loc
LD 1 0 ; Var world-map
LD 0 0 ; Var player-next-loc
LD 2 39 ; Var is-wall
AP 2 ; Func call is-wall
LD 2 4 ; Var not
AP 1 ; Func call not
RTN ; func72_$body$ return

LDF 1108 ; Load func71_$body$
AP 0 ; Call func71_$body$
RTN ; func71 return

LD 1 0 ; Var player-status
LDC 4 ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
RTN ; func71_$body$ return

LDF 1116 ; Load func66_$body$
AP 0 ; Call func66_$body$
RTN ; func66 return

LD 1 0 ; Var world-state
LDC 3 ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
RTN ; func66_$body$ return

LDF 1124 ; Load func67_$body$
AP 0 ; Call func67_$body$
RTN ; func67 return

LD 1 0 ; Var player-status
CAR ; 
RTN ; func67_$body$ return

LDC 0 ; Symbol coord-loc init for func68
LDF 1131 ; Load func68_$body$
AP 1 ; Call func68_$body$
RTN ; func68 return

LD 1 0 ; Define coord-loc
LDC 1 ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
ST 0 0 ; End define coord-loc
LD 0 0 ; Var coord-loc
CDR ; 
LD 0 0 ; Var coord-loc
CAR ; 
CONS ; 
RTN ; func68_$body$ return

LDF 1145 ; Load func69_$body$
AP 0 ; Call func69_$body$
RTN ; func69 return

LD 1 0 ; Var player-status
LDC 2 ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
RTN ; func69_$body$ return

LDC 0 ; Symbol row-start init for func62
LDC 0 ; Symbol col-start init for func62
LDF 1155 ; Load func62_$body$
AP 2 ; Call func62_$body$
RTN ; func62 return

LD 1 1 ; Define row-start
LD 2 34 ; Var get-loc-row
AP 1 ; Func call get-loc-row
ST 0 0 ; End define row-start
LD 1 1 ; Define col-start
LD 2 35 ; Var get-loc-col
AP 1 ; Func call get-loc-col
ST 0 1 ; End define col-start
LD 1 0 ; Var dir
LD 2 28 ; Var up
CEQ ; 
SEL 326 372 ; Sel on predicate (= dir up )
RTN ; func62_$body$ return

LDF 1171 ; Load func63_$body$
AP 0 ; Call func63_$body$
RTN ; func63 return

LD 1 0 ; Var world-state
CAR ; 
RTN ; func63_$body$ return

LDF 1177 ; Load func64_$body$
AP 0 ; Call func64_$body$
RTN ; func64 return

LD 1 0 ; Var world-state
LDC 1 ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
RTN ; func64_$body$ return

LDF 1185 ; Load func65_$body$
AP 0 ; Call func65_$body$
RTN ; func65 return

LD 1 0 ; Var world-state
LDC 2 ; 
LD 2 11 ; Var list-ref
AP 2 ; Func call list-ref
RTN ; func65_$body$ return

